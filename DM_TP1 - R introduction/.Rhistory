particion <- function(size,k){
ind  <- sample(1:size)
step <- floor(size/k)
ans <- Map( function(i)  ind[ ((i*step)+1):(i*step + step)] , 0:(k-1))
return(do.call(rbind, ans))
}
# Funcion util para particionar un dataset y luego realizar cross validation
# solo funciona para datasets con dos clases, 0 y 1
# devuelve una matriz de k filas donde cada fila son los indices de una partición
particionar <- function(dataset,k) {
n <- dim(dataset)[1]
d <- dim(dataset)[2]
clase0 <- dataset[dataset[,3]==0,]
clase1 <- dataset[dataset[,3]==1,]
n0 <- dim(clase1)[1]
n1 <- dim(clase0)[1]
ind0 <- particion(n0,k)
ind1 <- particion(n1,k)+n0
# en la fila k está la partición k
return(cbind(ind0,ind1))
}
load("C:/Users/Jeremías/Dropbox/FACU_2017/DM/DM_TP3_Jeremias/lampone.Rdata")
particional(lampone,5)
particionar(lampone,5)
lampone
dataset <- lampone
k <- 5
n <- dim(dataset)[1]
d <- dim(dataset)[2]
n
d
load("lampone.Rdata")
library(MASS)
classes <- lampone[,c(1,143)]
#Raw dataset, eliminando las  columnas no-numéricas, todas cero o con algún otro problema
nums <- sapply(lampone, is.numeric)
lamp <- lampone[ , nums]
i <- (colSums(lamp, na.rm=T) != 0)
lamp <- lamp[, i]
summary(lamp)
lamp[,nTipo]
lamp$143
lamp$m143
summary(lampone)
lampone[,1]
lampone[,143]
summary(lampone)
lampone[,143]
lampone <- lampone[, -143]
lampone <- Filter(is.numeric, lampone) # This also filters the _anno_ column
lampone <- Filter(function(x) sd(x) != 0, lampone)
summary(lampone)
dim(lampone)
load("C:/Users/Jeremías/Dropbox/FACU_2017/DM/DM_TP3_Jeremias/lampone.Rdata")
classes <- lampone[,143]
#Raw dataset, eliminando las  columnas no-numéricas, todas cero o con algún otro problema
nums <- sapply(lampone, is.numeric)
lamp <- lampone[ , nums]
i <- (colSums(lamp, na.rm=T) != 0)
lamp <- lamp[, i]
dim(lamp)
dataset <- lamp
lamp[,class]
summary(lamp)
lamp[,m195]
lamp$m195
lamp
#Dataset filtrado y con la clase al final
lamp <- cbind(lamp,class)
load("lampone.Rdata")
library(MASS)
class <- lampone[,143]
#Elimino las  columnas no-numéricas, todas cero o con algún otro problema
nums <- sapply(lampone, is.numeric)
lamp <- lampone[ , nums]
i <- (colSums(lamp, na.rm=T) != 0)
lamp <- lamp[, i]
#Dataset filtrado y con la clase al final
lamp <- cbind(lamp,cla
ss)
library(MASS)
class <- lampone[,143]
#Elimino las  columnas no-numéricas, todas cero o con algún otro problema
nums <- sapply(lampone, is.numeric)
lamp <- lampone[ , nums]
i <- (colSums(lamp, na.rm=T) != 0)
lamp <- lamp[, i]
#Dataset filtrado y con la clase al final
lamp <- cbind(lamp,class)
lamp
dim(lamp)
lamp$class
help(sapply)
class <- sapply((function (x) if (x==10) return(1) else return(0)), lampone[,143])
class <- sapply(lampone[,143],(function (x) if (x==10) return(1) else return(0)))
class
lampone[,143]
dim(lamp)
class <- sapply(lampone[,143],(function (x) if (x==10) return(1) else return(0)))
#Elimino las  columnas no-numéricas, todas cero o con algún otro problema
nums <- sapply(lampone, is.numeric)
lamp <- lampone[ , nums]
i <- (colSums(lamp, na.rm=T) != 0)
lamp <- lamp[, i]
#Dataset filtrado y con la clase al final
lamp <- cbind(lamp,class)
dataset <- lamp
k<- 5
n <- dim(dataset)[1]
d <- dim(dataset)[2]
clase0 <- dataset[dataset[,d]==0,]
clase1 <- dataset[dataset[,d]==1,]
clase0
clase1
n0 <- dim(clase1)[1]
n1 <- dim(clase0)[1]
n0
n1
particion <- function(size,k){
ind  <- sample(1:size)
step <- floor(size/k)
ans <- Map( function(i)  ind[ ((i*step)+1):(i*step + step)] , 0:(k-1))
return(do.call(rbind, ans))
}
ind0 <- particion(n0,k)
n0
k
ind0
ind1 <- particion(n1,k)+n0
ind1
ind1 <- particion(n1,k)+n0
particion(n1,k)
particion(n1,k)+n0
particionar(lamp,10)
#EJERCICIO 2
load("lampone.Rdata")
library(MASS)
#Extraigo la columna con la clase
class <- sapply(lampone[,143],(function (x) if (x==10) return(1) else return(0)))
#Elimino las  columnas no-numéricas, todas cero o con algún otro problema
nums <- sapply(lampone, is.numeric)
lamp <- lampone[ , nums]
i <- (colSums(lamp, na.rm=T) != 0)
lamp <- lamp[, i]
#Dataset filtrado y con la clase al final
lamp <- cbind(lamp,class)
# Particiona el conjunto {1,size} en k conjuntos aleatorios del mismo tamaño
# Si size no es divisible por k, se tiran size%%k elementos aleatorios
particion <- function(size,k){
ind  <- sample(1:size)
step <- floor(size/k)
ans <- Map( function(i)  ind[ ((i*step)+1):(i*step + step)] , 0:(k-1))
return(do.call(rbind, ans))
}
# Funcion util para particionar un dataset y luego realizar cross validation
# solo funciona para datasets con dos clases, 0 y 1
# devuelve una matriz de k filas donde cada fila son los indices de una partición
particionar <- function(dataset,k) {
n <- dim(dataset)[1]
d <- dim(dataset)[2]
clase0 <- dataset[dataset[,d]==0,]
clase1 <- dataset[dataset[,d]==1,]
n0 <- dim(clase1)[1]
n1 <- dim(clase0)[1]
ind0 <- particion(n0,k)
ind1 <- particion(n1,k)+n0
# en la fila k está la partición k
return(cbind(ind0,ind1))
}
particionar(lamp,5)
particionar(lamp,10)
dim(lamp)
particionar(lamp,3)
3*16
library("randomForest")
?randomForest
randomForest(class ~ . , data=lamp)
nfolds <- 3
folds  <- particionar(lamp,nfolds)
randomForest(class ~ . , data=lamp[-folds[0],])
lamp[-folds[0],]
lamp
lamp[-c(1,2),]
dim(lamp)
dim(lamp[-folds[0],])
dim(lamp[-folds[0]])
folds[0]
folds
dim(lamp[-folds[1]])
dim(lamp[-folds[1],])
dim(lamp[-folds[2],])
dim(lamp[-folds[3],])
